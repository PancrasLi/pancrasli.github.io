<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>实现一个检测前端是否有资源更新的方法</title>
    <link href="/2024/06/18/2024%E5%B9%B40618145954/"/>
    <url>/2024/06/18/2024%E5%B9%B40618145954/</url>
    
    <content type="html"><![CDATA[<p>开发环境是vite+vue,利用hashValue检测，直接上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">var</span> match;<br><span class="hljs-keyword">var</span> srcArray = [];<br><span class="hljs-keyword">var</span> checkTaskInterval = <span class="hljs-literal">null</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getNewVersionHash</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>    srcArray = []<br>    <span class="hljs-keyword">const</span> pageUrl = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">window</span>.location.protocol&#125;</span>//<span class="hljs-subst">$&#123;<span class="hljs-variable language_">window</span>.location.host&#125;</span>/index.html?v=<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()&#125;</span>`</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(pageUrl)<br>    <span class="hljs-keyword">let</span> htmlStr = response.<span class="hljs-property">data</span><br>    <span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/&lt;script[^&gt;]*src=[&#x27;&quot;]([^&#x27;&quot;]*)[&#x27;&quot;][^&gt;]*&gt;/gi</span>;<br>    <span class="hljs-keyword">while</span> (match = regex.<span class="hljs-title function_">exec</span>(htmlStr)) &#123;<br>        srcArray.<span class="hljs-title function_">push</span>(match[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 将每个src的值添加到数组中</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">checkVersion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>    srcArray = []<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">getNewVersionHash</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(srcArray)<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;jsHashVersion&#x27;</span>))&#123;<br>        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;jsHashVersion&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(srcArray))<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;jsHashVersion&#x27;</span>) &amp;&amp; <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;jsHashVersion&#x27;</span>) !== <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(srcArray))&#123;<br>        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;jsHashVersion&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(srcArray))<br>        <span class="hljs-built_in">clearInterval</span>(checkTaskInterval)<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;当前页面存在新版本，点击确定后更新使用&#x27;</span>)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>(<span class="hljs-literal">false</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">runCheckTask</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>    checkTaskInterval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">checkVersion</span>()<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;<br><br><br><span class="hljs-title function_">runCheckTask</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能优化 - 关键路径详细介绍</title>
    <link href="/2024/03/20/20240320142213_1/"/>
    <url>/2024/03/20/20240320142213_1/</url>
    
    <content type="html"><![CDATA[<h3 id="呈现路径涉及以下步骤"><a href="#呈现路径涉及以下步骤" class="headerlink" title="呈现路径涉及以下步骤"></a>呈现路径涉及以下步骤</h3><ul><li>通过 HTML 构建文档对象模型 (DOM)。</li><li>通过 CSS 构建样式表对象模型 (CSSOM)。</li><li>应用任何会更改 DOM 或 CSSOM 的 JavaScript。</li><li>在页面上执行样式和布局操作，看看哪些元素适合显示。</li><li>在内存中绘制元素的像素。</li><li>如果有任何像素重叠，则合成像素。</li><li>将像素发送到 GPU，进行光栅化。</li><li>将各个节点绘制到屏幕上。<br><img src="/img/20240320142213/step.jpg"></li></ul><h3 id="关键渲染路径上有哪些资源？"><a href="#关键渲染路径上有哪些资源？" class="headerlink" title="关键渲染路径上有哪些资源？"></a>关键渲染路径上有哪些资源？</h3><p>浏览器需要等待一些关键资源下载完毕，然后才能完成初始渲染。这些资源包括：</p><ul><li>HTML 的一部分。</li><li>&lt;head&gt; 元素中阻塞渲染的 CSS。</li><li>&lt;head&gt; 元素中的阻塞渲染的 JavaScript。</li></ul><p>关键在于浏览器以流式方式处理 HTML。浏览器一旦获取网页 HTML 的任何部分，就会开始对其进行处理。然后，浏览器就可以（并且通常确实）决定先呈现网页，然后再接收网页的其余部分 HTML。</p><p>重要的是，在首次渲染时，浏览器通常不会等待：</p><ul><li>所有 HTML。</li><li>字体。</li><li>Images.</li><li>&lt;head&gt;元素外（例如，位于 HTML 末尾的 &lt;script&gt; 元素）之外的非阻塞渲染的 JavaScript。</li><li>&lt;head&gt; 元素外或media 属性值不适用于当前视口的 CSS，不会阻止内容渲染。</li></ul><p>浏览器通常将字体和图片视为要在后续页面重新渲染时填充的内容，因此不需要延迟初始渲染。不过，这可能意味着，初始渲染中留下了空白区域，而文本被隐藏并等待字体显示，或直到有图像可用为止。更糟糕的是，当某些类型的内容没有预留足够的空间时（尤其是当 HTML 中未提供图片尺寸时），网页布局可能会在这些内容稍后加载时发生变化。这方面的用户体验是通过累计布局偏移 (CLS) 指标来衡量的。</p><p>&lt;head&gt; 元素是处理关键渲染路径的关键。优化 &lt;head&gt; 元素的内容是提升网页性能的一个关键方面。</p><p>&lt;head&gt; 元素包含有关页面及其资源的元数据，但不包含用户可以看到的实际内容。可见内容包含在 &lt;head&gt; 元素后面的 &lt;body&gt; 元素中。浏览器在渲染任何内容之前，需要同时需要渲染的内容以及有关如何渲染该内容的元数据。</p><p>不过，并非 &lt;head&gt; 元素中引用的所有资源都是首次呈现网页所必需的，因此浏览器只会等待那些资源。为了确定哪些资源处于关键渲染路径中，您需要了解阻塞渲染和解析器的 CSS 和 JavaScript。</p><h3 id="阻塞渲染的资源"><a href="#阻塞渲染的资源" class="headerlink" title="阻塞渲染的资源"></a>阻塞渲染的资源</h3><p>有些资源被认为非常关键，以至于浏览器会暂停网页呈现，直到它处理完毕。CSS 默认属于此类别。</p><blockquote><p>尽管 CSS 默认会阻塞渲染，但也可以通过更改 &lt;link&gt; 元素的 media 属性来指定与当前条件不匹配的值，将其转换为不阻塞渲染的资源：&lt;link rel&#x3D;stylesheet href&#x3D;”…” media&#x3D;print&gt;。</p></blockquote><p>注意！！！</p><p>资源阻塞渲染并不一定意味着它会阻止浏览器执行任何其他操作。浏览器会尽可能地提高效率，因此，当浏览器发现需要下载某项 CSS 资源时，它会请求该 CSS 资源并暂停渲染，但仍会继续处理其余 HTML 并寻找其他工作。</p><h3 id="阻塞解析器的资源"><a href="#阻塞解析器的资源" class="headerlink" title="阻塞解析器的资源"></a>阻塞解析器的资源</h3><p>阻塞解析器的资源是指那些阻止浏览器通过继续解析 HTML 来寻找要执行的其他工作的资源。默认情况下，JavaScript 会阻塞解析器（除非明确标记为异步或延迟），因为 JavaScript 可能会在执行时更改 DOM 或 CSSOM。因此，在了解所请求 JavaScript 对网页 HTML 造成的全部影响之前，浏览器就不可能继续处理其他资源。因此，同步 JavaScript 会阻止解析器。</p><p>阻塞解析器的资源实际上也是阻碍呈现的。由于解析器在完成解析之前无法继续跳过会阻塞解析的资源，因此它无法访问和呈现它之后的内容。浏览器在等待期间可以呈现到目前为止所收到的任何 HTML，但在涉及关键呈现路径的情况下，&lt;head&gt; 中任何阻止解析器的资源实际上意味着，所有网页内容都被阻止呈现。</p><p>阻塞解析器可能会消耗巨大的性能成本，远不止阻塞渲染的成本。因此，浏览器会使用辅助 HTML 解析器（称为预加载扫描程序）在主要 HTML 解析器被屏蔽时下载即将到来的资源，从而降低此成本。虽然不如实际解析 HTML 好，但至少允许浏览器中的网络功能先于被屏蔽的解析器运行，这意味着它将来再次被屏蔽的可能性更小。</p><h3 id="识别阻塞资源"><a href="#识别阻塞资源" class="headerlink" title="识别阻塞资源"></a>识别阻塞资源</h3><p>许多性能审核工具都会识别阻塞渲染和解析器的资源。<a href="https://www.webpagetest.org/">WebPageTest</a> 会使用资源网址左侧橙色圆圈标记阻止呈现的资源：<br><img src="/img/20240320142213/webTest.jpg"></p><p>未完待续。</p>]]></content>
    
    
    <categories>
      
      <category>前端性能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能优化 - HTML 性能的一般注意事项</title>
    <link href="/2024/03/20/20240320103250/"/>
    <url>/2024/03/20/20240320103250/</url>
    
    <content type="html"><![CDATA[<p>想要构建快速高效稳定的Web应用程序，需要我们在细节上做文章，毕竟进步都是点滴积累，今天来看下HTML性能的一般注意事项。</p><h2 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h2><p>当您在浏览器的地址栏中输入网址时，浏览器会向服务器发送 GET 请求进行检索。网页的第一个请求针对的是 HTML 资源，因此，确保 HTML 以最短延迟快速到达是关键性能目标。</p><h2 id="尽量减少重定向"><a href="#尽量减少重定向" class="headerlink" title="尽量减少重定向"></a>尽量减少重定向</h2><p>在请求资源时，服务器可能会做出一个重定向响应，该重定向可以是永久重定向（301 Moved Permanently 响应）或临时重定向（302 Found 响应）。</p><p>重定向会降低网页加载速度，因为它需要浏览器在新位置发出额外的 HTTP 请求来检索资源。重定向有两种类型：</p><ol><li>完全发生在源站内的同源重定向。这些类型的重定向完全由您控制，因为管理它们的逻辑完全位于您的 Web 服务器上。</li><li>由其他源启动的跨域重定向。这些类型的重定向通常无法控制。</li></ol><p>广告、网址缩短服务和其他第三方服务通常会使用跨源重定向。虽然跨源重定向超出了您的控制范围，但您可能仍需要检查是否避免了多次重定向。例如，将广告链接到 HTTP 网页，而该网页又重定向到其 HTTPS 等效网页，或者跨源重定向到达您的来源，但随后触发同源重定向。</p><h2 id="缓存-HTML-响应"><a href="#缓存-HTML-响应" class="headerlink" title="缓存 HTML 响应"></a>缓存 HTML 响应</h2><p>缓存 HTML 响应很困难，因为响应可能包含指向其他关键资源（例如 CSS、JavaScript、图片和其他资源类型）的链接。这些资源的文件名中可能包含唯一指纹，该指纹会根据文件的内容而变化。这意味着，缓存的 HTML 文档可能会在部署后变得过时，因为它包含对过时子资源的引用。（现代前端工程化打包后的资源hash值随时在变，会产生较多这样的问题）</p><p>不过，较短的缓存生命周期（而不是不缓存）具有诸多优势，例如允许在 CDN 中缓存资源，减少从源服务器传送的请求数量，以及在浏览器中传送资源，从而重新验证资源而不是再次下载。此方法最适合在任何上下文中不会更改的静态内容，并且可以将缓存资源的适当时间设置为您认为合适的分钟数。将静态 HTML 资源花五分钟的时间是一个可靠的选择，可以确保定期更新不会引起注意。</p><p>如果网页的 HTML 内容以某种方式进行了个性化（例如针对经过身份验证的用户），那么您很有可能因各种问题（包括安全性和新鲜度）而根本不想缓存内容。如果用户浏览器缓存了 HTML 响应，您就无法使缓存失效。因此，在此类情况下，最好避免完全缓存 HTML。</p><p>缓存 HTML 的一种审慎方法是使用 ETag 或 Last-Modified 响应标头。ETag（也称为实体标记）标头是一个标识符，用于唯一标识所请求资源，通常使用资源内容的哈希值：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">ETag:</span> <span class="hljs-string">&quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span><br></code></pre></td></tr></table></figure><p><code>Last-Modified</code> 响应标头包含资源的最后修改日期和时间：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Last</span>-Modified: Tue, <span class="hljs-number">15</span> Nov <span class="hljs-number">1994</span> <span class="hljs-number">12</span>:<span class="hljs-number">45</span>:<span class="hljs-number">26</span> GMT    <br><br></code></pre></td></tr></table></figure><h2 id="测量服务器响应时间"><a href="#测量服务器响应时间" class="headerlink" title="测量服务器响应时间"></a>测量服务器响应时间</h2><p>如果响应未缓存，则服务器的响应时间在很大程度上取决于您的托管服务提供商和后端应用堆栈。与动态网页相比，提供动态生成的响应（例如从数据库获取数据）的网页的 TTFB 可能更高，无需在后端投入大量计算时间即可立即提供。如果显示加载旋转图标，然后在客户端提取所有数据，则会将工作从更加可预测的服务器端环境移至可能不可预测的客户端环境。最大限度地减少客户端工作量通常可以改进以用户为中心的指标。</p><p>如果用户在字段遇到 TTFB(TTFB 是 Time to First Byte 的缩写，指的是浏览器开始收到服务器响应数据的时间) 缓慢的问题，您可以使用 Server-Timing 响应标头公开有关时间在服务器上的什么位置的信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Server-Timing: auth;<span class="hljs-attribute">dur</span>=55.5, db;<span class="hljs-attribute">dur</span>=220<br></code></pre></td></tr></table></figure><p>Server-Timing 标头的值可以包含多个指标，以及每个指标的时长。然后，可以在现场使用 Navigation Timing API 从用户那里收集这些数据，并进行分析，以了解用户是否遇到延迟。在前面的代码段中，响应标头包含两个显示时间：</p><p>对用户进行身份验证的时间 (auth)，用时 55.5 毫秒。<br>数据库访问时间 (db)，用时 220 毫秒。</p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>基于文本的响应（例如 HTML、JavaScript、CSS 和 SVG 图片）应进行压缩，以减小通过网络传输时的大小，从而加快其下载速度。最常用的压缩算法是 gzip 和 <a href="https://github.com/google/brotli">Brotli</a>。<a href="https://github.com/google/brotli">Brotli</a> 比 gzip 提高了约 15% 到 20%。</p>]]></content>
    
    
    <categories>
      
      <category>前端性能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解任务执行的洋葱模型 - koa</title>
    <link href="/2024/03/19/20240319124707/"/>
    <url>/2024/03/19/20240319124707/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是洋葱模型"><a href="#1-什么是洋葱模型" class="headerlink" title="1. 什么是洋葱模型"></a>1. 什么是洋葱模型</h2><p>洋葱模型，是 koa 中间件的执行顺序，洋葱模型的执行顺序是：   </p><ul><li>中间件 A 开始执行    </li><li>中间件 A 执行完毕，执行下一个中间件 B</li><li>中间件 B 执行完毕，执行下一个中间件 C<br>….</li></ul><h2 id="2-实现一个洋葱模型的任务执行构造函数"><a href="#2-实现一个洋葱模型的任务执行构造函数" class="headerlink" title="2. 实现一个洋葱模型的任务执行构造函数"></a>2. 实现一个洋葱模型的任务执行构造函数</h2><p>需求：实现一个构造函数满足以下需求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskPro</span>();<br>t.<span class="hljs-title function_">addTask</span>(<span class="hljs-keyword">async</span> (next) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;end&quot;</span>);<br>&#125;);<br>t.<span class="hljs-title function_">addTask</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;);<br>t.<span class="hljs-title function_">addTask</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>&#125;);<br><br>t.<span class="hljs-title function_">run</span>(); <span class="hljs-comment">// 输出 1 start 2 3 1 end</span><br></code></pre></td></tr></table></figure><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskPro</span> &#123;<br>  <span class="hljs-comment">// 添加任务</span><br>  _tasklist = [];<br>  <span class="hljs-comment">//当前任务正在执行标识</span><br>  _running = <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">//要执行任务的下标</span><br>  _currentIndex = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">//添加任务</span><br>  <span class="hljs-title function_">addTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_tasklist</span>.<span class="hljs-title function_">push</span>(task);<br>  &#125;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 边界情况判定，如果当前任务正在执行，直接return</span><br><span class="hljs-comment">     * 否则，开始执行任务</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_running</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 未在执行任务，设置标识</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_running</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 执行任务</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_runTask</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">_next</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 执行下一个任务</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentIndex</span>++;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_runTask</span>();<br>  &#125;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">_runTask</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 边界情况判定</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentIndex</span> &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">_tasklist</span>.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-comment">// 所有任务执行完毕，设置标识</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_running</span> = <span class="hljs-literal">false</span>;<br>      <span class="hljs-comment">// 清空任务列表</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_tasklist</span> = [];<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 记录任务执行之前的下标</span><br>    <span class="hljs-keyword">const</span> prevIndex = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentIndex</span>;<br><br>    <span class="hljs-comment">// 获取当前任务</span><br>    <span class="hljs-keyword">const</span> task = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_tasklist</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentIndex</span>];<br><br>    <span class="hljs-comment">// 执行当前任务</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">task</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_next</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));<br>    <span class="hljs-comment">// 记录任务执行之后的下标</span><br>    <span class="hljs-keyword">const</span> nextIndex = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentIndex</span>;<br>    <span class="hljs-comment">// 边界情况判定</span><br>    <span class="hljs-keyword">if</span> (prevIndex === nextIndex) &#123;<br>      <span class="hljs-comment">// 当前任务执行完毕，执行下一个任务</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_next</span>();<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">//-------- 结果 ----------</span><br><span class="hljs-keyword">const</span> t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskPro</span>();<br>t.<span class="hljs-title function_">addTask</span>(<span class="hljs-keyword">async</span> (next) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;end&quot;</span>);<br>&#125;);<br>t.<span class="hljs-title function_">addTask</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;);<br>t.<span class="hljs-title function_">addTask</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>&#125;);<br>t.<span class="hljs-title function_">run</span>(); <span class="hljs-comment">// 输出 1 start 2 3 1 end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包提权漏洞：修改私有对象的属性</title>
    <link href="/2024/03/13/20240313123053/"/>
    <url>/2024/03/13/20240313123053/</url>
    
    <content type="html"><![CDATA[<h4 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h4><p>以前在面试过程中发现一道有趣的题，抖音刷到了袁进老师的视频，对该问题有了更进一步的认识，记录一下。</p><h4 id="面试题内容"><a href="#面试题内容" class="headerlink" title="面试题内容"></a>面试题内容</h4><blockquote><p>如何在不改变源代码的情况下，修改 o 对象的属性？</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o =(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) &#123;<br>      <span class="hljs-keyword">return</span> obj[key];<br>    &#125;,<br>  &#125;;<br>&#125;)()<br></code></pre></td></tr></table></figure><ol><li>首先要读一个对象，就会想到读对象的原型，原型有 valueOf 方法，可以读到对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;valueOf&quot;</span>)); <span class="hljs-comment">// output : [Function: valueOf]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>读到 valueOf 方法，可以调用 valueOf 方法，读到对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;valueOf&quot;</span>)()); <span class="hljs-comment">// output : error - 知识点1:this指向问题</span><br><span class="hljs-comment">// 上述代码等同于</span><br><span class="hljs-keyword">let</span> handleValueOf = o.<span class="hljs-property">valueOf</span>;<br><span class="hljs-title function_">handleValueOf</span>(); <span class="hljs-comment">// output : error  this不指向对象本身</span><br></code></pre></td></tr></table></figure><ol start="3"><li>valueOf 无法读到对象本身，可以直接使用 Object.defineProperty 增加一个返回对象本身的方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;hack&quot;</span>, &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="4"><li>同多原型链自定义方法访问到私有对象本身,更改 o 对象本身,就实现了上述功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> objectBackup = o.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;hack&quot;</span>);<br><br>objectBackup.<span class="hljs-property">c</span> = <span class="hljs-string">&quot;hackInner&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;c&quot;</span>)); <span class="hljs-comment">// &#x27;hackInner&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><ol><li>原型设置为 null</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o =(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  &#125;;<br><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, <span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) &#123;<br>      <span class="hljs-keyword">return</span> obj[key];<br>    &#125;,<br>  &#125;;<br>&#125;)()<br></code></pre></td></tr></table></figure><ol start="2"><li>在访问器中判断是否自身携带属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) &#123;<br>      <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>        <span class="hljs-keyword">return</span> obj[key];<br>      &#125;<br>    &#125;,<br>  &#125;;<br>&#125;)()<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一切代码皆有漏洞，需要谨慎编写，尽量防御</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问题记录-关于 VUECLI3+ 容易忽视的问题-环境变量与build</title>
    <link href="/2024/02/23/20240223162747/"/>
    <url>/2024/02/23/20240223162747/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于近两年技术栈切换到了Vue3.0，打包工具自然而然的切换到了Vite，导致在维护旧的项目时会忽视一些关键性问题。在最近一次开发过程中，发现测试环境部署的项目一直存在比较严重的缓存问题，排查后发现是打包后的文件hash值没有发生变化，导致浏览器直接读取缓存文件，而没有重新请求资源。</p><h2 id="追根溯源"><a href="#追根溯源" class="headerlink" title="追根溯源"></a>追根溯源</h2><p>既然发现是build过程中发现的问题，就查阅了VUECLI3+的文档，发现文档中关于环境变量的说明中，有这么一段话：</p><p>当运行 vue-cli-service 命令时，所有的环境变量都从对应的环境文件中载入。如果文件内部不包含 NODE_ENV 变量，它的值将取决于模式，例如，在 production 模式下被设置为 “production”，在 test 模式下被设置为 “test”，默认则是 “development”。</p><p>NODE_ENV 将决定您的应用运行的模式，是开发，生产还是测试，因此也决定了创建哪种 webpack 配置。</p><p>例如通过将 NODE_ENV 设置为 “test”，Vue CLI 会创建一个优化过后的，并且旨在用于单元测试的 webpack 配置，它并不会处理图片以及一些对单元测试非必需的其他资源。</p><p>同理，NODE_ENV&#x3D;development 创建一个 webpack 配置，该配置启用热更新，不会对资源进行 hash 也不会打出 vendor bundles，目的是为了在开发的时候能够快速重新构建。</p><p>当你运行 vue-cli-service build 命令时，无论你要部署到哪个环境，应该始终把 NODE_ENV 设置为 “production”来获取可用于部署的应用程序。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>上述文档描述的很清楚了，顺着文档的描述将test的环境变量NODE_ENV设置为”production”即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在开发过程中，文档能解决框架90%的问题，因此，在开发过程中，一定要仔细阅读文档，避免走弯路。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F">Vue CLI - 模式与环境变量</a></p>]]></content>
    
    
    <categories>
      
      <category>开发日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 githubActions 完成NPM包自动发布</title>
    <link href="/2023/12/14/20231214175822/"/>
    <url>/2023/12/14/20231214175822/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>为了拓宽知识面，将前几天发的 utils 使用 Vite 打包成了 umd 发布到了 npm,主要是用来自己使用和相关知识学习。在发布过程中，发现每次提交 npmPackage 新版本都需要进行打包，本地发布，非常繁琐，了解了一下可以使用 githubActions 进行自动发布,现在将步骤记录下。</p><h3 id="实现概述"><a href="#实现概述" class="headerlink" title="实现概述"></a>实现概述</h3><ol><li>首先我们需要打通 github 和 npm 之间的联系，了解后发现 npm 提供了 AccessToken,github 也提供了<a href="https://docs.github.com/zh/actions/security-guides/using-secrets-in-github-actions">secrets</a>可以保存秘钥,实现联通。</li><li>联通后需要执行我们的部署脚本，让其在 Action 中自动执行。</li></ol><h3 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Publish</span> <span class="hljs-string">Package</span> <span class="hljs-string">to</span> <span class="hljs-string">npmjs</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-comment"># Setup .npmrc file to publish to npm</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;16.x&quot;</span><br>          <span class="hljs-attr">registry-url:</span> <span class="hljs-string">&quot;https://registry.npmjs.org&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">publish</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">NODE_AUTH_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.NPM_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>上面是我的脚本，有相关基础的话很容易看懂。中间少了版本号生成的一步，所以在发布到 npm 之前记得手动修改哦，或者使用 npm 提供的方法进行版本号递增。</p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS常用Utils</title>
    <link href="/2023/12/07/20231207173941/"/>
    <url>/2023/12/07/20231207173941/</url>
    
    <content type="html"><![CDATA[<h6 id="图片预加载"><a href="#图片预加载" class="headerlink" title="图片预加载"></a>图片预加载</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 预加载图片</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> source   Array 预加载图片列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*预加载图片*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">preLoadImg</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-comment">/*加载图片方法*/</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadImage</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>      img.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(img);<br>      img.<span class="hljs-property">onerror</span> = reject;<br>      img.<span class="hljs-property">src</span> = url;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> pr = [];<br>  source.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">url</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 预加载图片</span><br>    <span class="hljs-keyword">let</span> p = <span class="hljs-title function_">loadImage</span>(url)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Single image loading completed&quot;</span>);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      &#125;);<br>    pr.<span class="hljs-title function_">push</span>(p);<br>  &#125;);<br>  <span class="hljs-comment">// 图片全部加载完</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(pr).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;All images loaded&quot;</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="获取-url-参数"><a href="#获取-url-参数" class="headerlink" title="获取 url 参数"></a>获取 url 参数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取URL参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name   String 要获取的参数Key</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getQueryString</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(^|&amp;)&quot;</span> + name + <span class="hljs-string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);<br>  <span class="hljs-keyword">var</span> r = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">match</span>(reg);<br>  <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(r[<span class="hljs-number">2</span>]);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="判断-str-字符串中是否含有字符串"><a href="#判断-str-字符串中是否含有字符串" class="headerlink" title="判断 str 字符串中是否含有字符串"></a>判断 str 字符串中是否含有字符串</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断 str 字符串中是否含有字符串 subStr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type"></span>&#125; str 原字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type"></span>&#125; subStr 要查找的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type"></span>&#125; isIgnoreCase 是否忽略大小写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">Boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">contains</span>(<span class="hljs-params">str, subStr, isIgnoreCase</span>) &#123;<br>  <span class="hljs-keyword">if</span> (isIgnoreCase) &#123;<br>    <span class="hljs-comment">// 忽略大小写</span><br>    str = str.<span class="hljs-title function_">toLowerCase</span>();<br>    subStr = subStr.<span class="hljs-title function_">toLowerCase</span>();<br>  &#125;<br>  <span class="hljs-keyword">var</span> startChar = subStr.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">var</span> strLen = subStr.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; str.<span class="hljs-property">length</span> - strLen + <span class="hljs-number">1</span>; j++) &#123;<br>    <span class="hljs-keyword">if</span> (str.<span class="hljs-title function_">charAt</span>(j) == startChar) &#123;<br>      <span class="hljs-comment">/* 如果匹配起始字符,开始查找 */</span><br>      <span class="hljs-keyword">if</span> (str.<span class="hljs-title function_">substring</span>(j, j + strLen) == subStr) &#123;<br>        <span class="hljs-comment">/*如果从j开始的字符与 str 匹配 */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="cookie-操作"><a href="#cookie-操作" class="headerlink" title="cookie 操作"></a>cookie 操作</h6><ul><li>设置 cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置cookie</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name  String key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value String Value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> expdays Number 过期时间</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setCookie</span>(<span class="hljs-params">name, value, expdays</span>) &#123;<br>  <span class="hljs-keyword">var</span> expdate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <span class="hljs-comment">//设置Cookie过期日期</span><br>  expdate.<span class="hljs-title function_">setDate</span>(expdate.<span class="hljs-title function_">getDate</span>() + expdays);<br>  <span class="hljs-comment">//添加Cookie</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> =<br>    name + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">escape</span>(value) + <span class="hljs-string">&quot;;expires=&quot;</span> + expdate.<span class="hljs-title function_">toUTCString</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取 cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取cookie</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name String key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-comment">//获取name在Cookie中起止位置</span><br>  <span class="hljs-keyword">var</span> start = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">indexOf</span>(name + <span class="hljs-string">&quot;=&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (start != -<span class="hljs-number">1</span>) &#123;<br>    start = start + name.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//获取value的终止位置</span><br>    <span class="hljs-keyword">var</span> end = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;;&quot;</span>, start);<br>    <span class="hljs-keyword">if</span> (end == -<span class="hljs-number">1</span>) end = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-property">length</span>;<br>    <span class="hljs-comment">//截获cookie的value值,并返回</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">substring</span>(start, end));<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>删除 cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">delCookie</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  exp.<span class="hljs-title function_">setTime</span>(exp.<span class="hljs-title function_">getTime</span>() - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">var</span> cval = <span class="hljs-title function_">getCookie</span>(name);<br>  <span class="hljs-keyword">if</span> (cval != <span class="hljs-literal">null</span>)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = name + <span class="hljs-string">&quot;=&quot;</span> + cval + <span class="hljs-string">&quot;;expires=&quot;</span> + exp.<span class="hljs-title function_">toGMTString</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上述功能已经发布至 NPM 参考<a href="https://www.npmjs.com/package/p-utils-cli">p-utils</a></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nrm管理npm源</title>
    <link href="/2023/12/07/20231207172556/"/>
    <url>/2023/12/07/20231207172556/</url>
    
    <content type="html"><![CDATA[<blockquote><p>关于 NRM</p></blockquote><p>nrm（NPM registry manager）是 npm 的镜像源管理工具，使用它可以快速切换 npm 源。</p><blockquote><p>使用</p></blockquote><ol><li>全局安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g nrm<br></code></pre></td></tr></table></figure><ol start="2"><li>日常使用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#切换源</span><br>nrm use &lt;registry&gt;<br><br><span class="hljs-comment">#添加源</span><br>nrm add &lt;registry&gt; &lt;url&gt;<br><br><span class="hljs-comment">#删除源</span><br>nrm del &lt;registry&gt;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/Pana/nrm">更多信息看这里！</a></p>]]></content>
    
    
    <categories>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于js的浮点数计算问题记录</title>
    <link href="/2023/11/30/20231130112354/"/>
    <url>/2023/11/30/20231130112354/</url>
    
    <content type="html"><![CDATA[<blockquote><p>为什么 js 会有浮点数计算精度问题？</p></blockquote><p>在 JavaScript 中，整数和浮点数都归属于 Number 类型，数字都是 64 位浮点数形式存储的，这样就会导致浮点数运算时候会出现一些问题，下面是一些例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> numberA = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;<br><span class="hljs-keyword">let</span> numberB = <span class="hljs-number">1.5</span> - <span class="hljs-number">1.2</span>;<br><span class="hljs-keyword">let</span> numberC = <span class="hljs-number">19.9</span> * <span class="hljs-number">100</span>;<br><span class="hljs-keyword">let</span> numberD = <span class="hljs-number">0.3</span> / <span class="hljs-number">0.1</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>  <span class="hljs-string">&quot;numberA &quot;</span>,<br>  numberA,<br>  <span class="hljs-string">&quot; numberB &quot;</span>,<br>  numberB,<br>  <span class="hljs-string">&quot; numberC &quot;</span>,<br>  numberC,<br>  <span class="hljs-string">&quot; numberD &quot;</span>,<br>  numberD<br>);<br><br><span class="hljs-comment">// output numberA 0.30000000000000004 numberB 0.30000000000000004 numberC 1989.9999999999998 numberD 2.9999999999999996</span><br></code></pre></td></tr></table></figure><p>上述案例的计算结果并不符合我们数学计算逻辑，这样导致我们在进行一些复杂的浮点数运算时候出现偏差，业务场景多见于财务和商品金额计算，在项目中我们做了相关数学方法兼容处理，以下是我们的处理方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mathHandle = &#123;<br>  <span class="hljs-attr">add</span>: <span class="hljs-function">(<span class="hljs-params">arg1: any, arg2: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> r1, r2, m;<br>    <span class="hljs-keyword">try</span> &#123;<br>      r1 = arg1.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      r1 = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      r2 = arg2.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      r2 = <span class="hljs-number">0</span>;<br>    &#125;<br>    m = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">10</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(r1, r2));<br>    <span class="hljs-keyword">return</span> (arg1 * m + arg2 * m) / m;<br>  &#125;,<br>  <span class="hljs-attr">subtract</span>: <span class="hljs-function">(<span class="hljs-params">arg1: any, arg2: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> r1, r2, m, n;<br>    <span class="hljs-keyword">try</span> &#123;<br>      r1 = arg1.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      r1 = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      r2 = arg2.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      r2 = <span class="hljs-number">0</span>;<br>    &#125;<br>    m = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">10</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(r1, r2));<br>    <span class="hljs-comment">//动态控制精度长度</span><br>    n = r1 &gt;= r2 ? r1 : r2;<br>    <span class="hljs-keyword">return</span> ((arg1 * m - arg2 * m) / m).<span class="hljs-title function_">toFixed</span>(n);<br>  &#125;,<br>  <span class="hljs-attr">multiply</span>: <span class="hljs-function">(<span class="hljs-params">arg1: any, arg2: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> m = <span class="hljs-number">0</span>,<br>      s1 = arg1.<span class="hljs-title function_">toString</span>(),<br>      s2 = arg2.<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>      m += s1.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      m += s2.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;<br>    <span class="hljs-keyword">return</span> (<br>      (<span class="hljs-title class_">Number</span>(s1.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) * <span class="hljs-title class_">Number</span>(s2.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))) /<br>      <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">10</span>, m)<br>    );<br>  &#125;,<br>  <span class="hljs-attr">divide</span>: <span class="hljs-function">(<span class="hljs-params">arg1: any, arg2: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> t1 = <span class="hljs-number">0</span>,<br>      t2 = <span class="hljs-number">0</span>,<br>      r1,<br>      r2;<br>    <span class="hljs-keyword">try</span> &#123;<br>      t1 = arg1.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      t2 = arg2.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;<br>    r1 = <span class="hljs-title class_">Number</span>(arg1.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>    r2 = <span class="hljs-title class_">Number</span>(arg2.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-keyword">return</span> (r1 / r2) * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">10</span>, t2 - t1);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>上述代码已经完全应用于业务代码中，并且暂未出现问题，网上还有更多更完善的解决方案（mathjs）等，可供大家参考。</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js手写filter方法</title>
    <link href="/2023/11/29/20231129151306/"/>
    <url>/2023/11/29/20231129151306/</url>
    
    <content type="html"><![CDATA[<p>直接上干货</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myFilter</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">callback, thisArg</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&quot;this is null or not defined&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(callback + <span class="hljs-string">&quot; is not a function&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> res = [];<br><br>  <span class="hljs-comment">// 让O成为回调函数的对象传递（强制转换对象）</span><br><br>  <span class="hljs-keyword">const</span> O = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);<br><br>  <span class="hljs-comment">// &gt;&gt;&gt;0 保证len为number，且为正整数</span><br><br>  <span class="hljs-keyword">const</span> len = O.<span class="hljs-property">length</span> &gt;&gt;&gt; <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-comment">// 检查i是否在O的属性（会检查原型链）</span><br><br>    <span class="hljs-keyword">if</span> (i <span class="hljs-keyword">in</span> O) &#123;<br>      <span class="hljs-comment">// 回调函数调用传参</span><br><br>      <span class="hljs-keyword">if</span> (callback.<span class="hljs-title function_">call</span>(thisArg, O[i], i, O)) &#123;<br>        res.<span class="hljs-title function_">push</span>(O[i]);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><br><span class="hljs-comment">// 使用示例</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">myFilter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">3</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr); <span class="hljs-comment">// 输出：[4, 5]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断dom是否在视图中出现</title>
    <link href="/2023/11/24/2023112410009/"/>
    <url>/2023/11/24/2023112410009/</url>
    
    <content type="html"><![CDATA[<ul><li>元素完全在可视区域中出现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">return  true 完全出现  false  未完全出现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">elementInViewport</span>(<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-keyword">var</span> top = el.<span class="hljs-property">offsetTop</span>;<br>  <span class="hljs-keyword">var</span> left = el.<span class="hljs-property">offsetLeft</span>;<br>  <span class="hljs-keyword">var</span> width = el.<span class="hljs-property">offsetWidth</span>;<br>  <span class="hljs-keyword">var</span> height = el.<span class="hljs-property">offsetHeight</span>;<br><br>  <span class="hljs-keyword">while</span>(el.<span class="hljs-property">offsetParent</span>) &#123;<br>    el = el.<span class="hljs-property">offsetParent</span>;<br>    top += el.<span class="hljs-property">offsetTop</span>;<br>    left += el.<span class="hljs-property">offsetLeft</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    top &gt;= <span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span> &amp;&amp;<br>    left &gt;= <span class="hljs-variable language_">window</span>.<span class="hljs-property">pageXOffset</span> &amp;&amp;<br>    (top + height) &lt;= (<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) &amp;&amp;<br>    (left + width) &lt;= (<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageXOffset</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>)<br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>元素任何一部分在可视区域出现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">elementInViewport2</span>(<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-keyword">var</span> top = el.<span class="hljs-property">offsetTop</span>;<br>  <span class="hljs-keyword">var</span> left = el.<span class="hljs-property">offsetLeft</span>;<br>  <span class="hljs-keyword">var</span> width = el.<span class="hljs-property">offsetWidth</span>;<br>  <span class="hljs-keyword">var</span> height = el.<span class="hljs-property">offsetHeight</span>;<br><br>  <span class="hljs-keyword">while</span>(el.<span class="hljs-property">offsetParent</span>) &#123;<br>    el = el.<span class="hljs-property">offsetParent</span>;<br>    top += el.<span class="hljs-property">offsetTop</span>;<br>    left += el.<span class="hljs-property">offsetLeft</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    top &lt; (<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) &amp;&amp;<br>    left &lt; (<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageXOffset</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) &amp;&amp;<br>    (top + height) &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span> &amp;&amp;<br>    (left + width) &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">pageXOffset</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
